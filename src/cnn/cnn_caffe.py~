# -*- coding: utf-8 -*-
##
# @brief CNN for relation extraction, based on caffe
# @author ss

import os
from sklearn.base import BaseEstimator, ClassifierMixin
import numpy as np
import caffe
from caffe import layers as L
from caffe import params as P
from caffe.proto import caffe_pb2
from caffe.proto.caffe_pb2 import NetParameter, LayerParameter, DataParameter, SolverParameter, ParamSpec
from caffe.proto.caffe_pb2 import Datum
    
    
class CNN(object):
    def __init__(self, prototxt_files, caffemodel_file):
        self.solver_prototxt = prototxt_files['solver_prototxt']
        self.deploy_prototxt = prototxt_files['deploy_prototxt']
        self.caffemodel_file = caffemodel_file

    def fit(self):
        caffe.set_mode_gpu()
        solver = caffe.get_solver(self.solver_prototxt)
        solver.solve()
        return self
    
    def transform(self, inputs):
        outputs = []
        caffe.set_mode_gpu()
        net = caffe.Net(self.deploy_prototxt, 
                                       self.caffemodel_file,
                                       caffe.TEST)
        batch_size = 50
        net.blobs['data'].reshape(batch_size, 1, 84, 400)
        last_flag = False
        for i in range(0, inputs.shape[0], batch_size):
             in_ = inputs[i:i+batch_size]
             if len(in_)!=batch_size:
                 last_flag = True
                 net.blobs['data'].reshape(len(in_), 1, 84, 400)
             net.blobs['data'].data[...] = in_
             net.forward()
             out = net.blobs['fc1'].data
             if last_flag:
                 out = out[0:len(in_)]
             for item in out:
                  outputs.append(np.argmax(item))
        """
        for i in range(inputs.shape[0]):
            in_ = inputs[i]
            in_ = np.reshape(in_, [-1, in_.shape[0], in_.shape[1], in_.shape[2]])
            out = net.forward(data=in_)
            print "output:", out['prob']
            outputs.append(np.argmax(out['prob']))
        """
        return outputs


if __name__ == '__main__':
    main()
